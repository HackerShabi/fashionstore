{"ast":null,"code":"/**\r\n * Format a price in cents to a currency string\r\n * @param {number} price - Price in cents\r\n * @param {string} locale - Locale for formatting (default: 'en-US')\r\n * @param {string} currency - Currency code (default: 'USD')\r\n * @returns {string} Formatted price string\r\n */\nexport const formatCurrency = (price, locale = 'en-US', currency = 'USD') => {\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency: currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(price);\n};\n\n/**\r\n * Truncate a string to a specified length and add ellipsis if truncated\r\n * @param {string} str - The string to truncate\r\n * @param {number} length - Maximum length of the string\r\n * @returns {string} Truncated string\r\n */\nexport const truncateString = (str, length = 100) => {\n  if (!str) return '';\n  if (str.length <= length) return str;\n  return str.slice(0, length) + '...';\n};\n\n/**\r\n * Format a date string or timestamp\r\n * @param {string|number|Date} date - Date to format\r\n * @param {object} options - Intl.DateTimeFormat options\r\n * @returns {string} Formatted date string\r\n */\nexport const formatDate = (date, options = {}) => {\n  const defaultOptions = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  };\n  const dateObj = date instanceof Date ? date : new Date(date);\n  return new Intl.DateTimeFormat('en-US', {\n    ...defaultOptions,\n    ...options\n  }).format(dateObj);\n};\n\n/**\r\n * Generate a random ID string\r\n * @param {number} length - Length of the ID\r\n * @returns {string} Random ID\r\n */\nexport const generateId = (length = 8) => {\n  return Math.random().toString(36).substring(2, 2 + length);\n};\n\n/**\r\n * Delay execution for specified milliseconds\r\n * @param {number} ms - Milliseconds to delay\r\n * @returns {Promise} Promise that resolves after delay\r\n */\nexport const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\r\n * Calculate discount percentage\r\n * @param {number} originalPrice - Original price\r\n * @param {number} discountedPrice - Discounted price\r\n * @returns {number} Discount percentage\r\n */\nexport const calculateDiscount = (originalPrice, discountedPrice) => {\n  if (originalPrice <= 0 || discountedPrice >= originalPrice) return 0;\n  return Math.round((originalPrice - discountedPrice) / originalPrice * 100);\n};\n\n/**\r\n * Validate email format\r\n * @param {string} email - Email address to validate\r\n * @returns {boolean} Whether email is valid\r\n */\nexport const isValidEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};","map":{"version":3,"names":["formatCurrency","price","locale","currency","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","truncateString","str","length","slice","formatDate","date","options","defaultOptions","year","month","day","dateObj","Date","DateTimeFormat","generateId","Math","random","toString","substring","delay","ms","Promise","resolve","setTimeout","calculateDiscount","originalPrice","discountedPrice","round","isValidEmail","email","emailRegex","test"],"sources":["C:/Users/Shabi/Desktop/my-tailwind-app/src/utils/formatters.js"],"sourcesContent":["/**\r\n * Format a price in cents to a currency string\r\n * @param {number} price - Price in cents\r\n * @param {string} locale - Locale for formatting (default: 'en-US')\r\n * @param {string} currency - Currency code (default: 'USD')\r\n * @returns {string} Formatted price string\r\n */\r\nexport const formatCurrency = (price, locale = 'en-US', currency = 'USD') => {\r\n  return new Intl.NumberFormat(locale, {\r\n    style: 'currency',\r\n    currency: currency,\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  }).format(price);\r\n};\r\n\r\n/**\r\n * Truncate a string to a specified length and add ellipsis if truncated\r\n * @param {string} str - The string to truncate\r\n * @param {number} length - Maximum length of the string\r\n * @returns {string} Truncated string\r\n */\r\nexport const truncateString = (str, length = 100) => {\r\n  if (!str) return '';\r\n  if (str.length <= length) return str;\r\n  return str.slice(0, length) + '...';\r\n};\r\n\r\n/**\r\n * Format a date string or timestamp\r\n * @param {string|number|Date} date - Date to format\r\n * @param {object} options - Intl.DateTimeFormat options\r\n * @returns {string} Formatted date string\r\n */\r\nexport const formatDate = (date, options = {}) => {\r\n  const defaultOptions = {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  };\r\n  \r\n  const dateObj = date instanceof Date ? date : new Date(date);\r\n  \r\n  return new Intl.DateTimeFormat('en-US', { ...defaultOptions, ...options }).format(dateObj);\r\n};\r\n\r\n/**\r\n * Generate a random ID string\r\n * @param {number} length - Length of the ID\r\n * @returns {string} Random ID\r\n */\r\nexport const generateId = (length = 8) => {\r\n  return Math.random().toString(36).substring(2, 2 + length);\r\n};\r\n\r\n/**\r\n * Delay execution for specified milliseconds\r\n * @param {number} ms - Milliseconds to delay\r\n * @returns {Promise} Promise that resolves after delay\r\n */\r\nexport const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n/**\r\n * Calculate discount percentage\r\n * @param {number} originalPrice - Original price\r\n * @param {number} discountedPrice - Discounted price\r\n * @returns {number} Discount percentage\r\n */\r\nexport const calculateDiscount = (originalPrice, discountedPrice) => {\r\n  if (originalPrice <= 0 || discountedPrice >= originalPrice) return 0;\r\n  return Math.round(((originalPrice - discountedPrice) / originalPrice) * 100);\r\n};\r\n\r\n/**\r\n * Validate email format\r\n * @param {string} email - Email address to validate\r\n * @returns {boolean} Whether email is valid\r\n */\r\nexport const isValidEmail = (email) => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,GAAGA,CAACC,KAAK,EAAEC,MAAM,GAAG,OAAO,EAAEC,QAAQ,GAAG,KAAK,KAAK;EAC3E,OAAO,IAAIC,IAAI,CAACC,YAAY,CAACH,MAAM,EAAE;IACnCI,KAAK,EAAE,UAAU;IACjBH,QAAQ,EAAEA,QAAQ;IAClBI,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC,CAACC,MAAM,CAACR,KAAK,CAAC;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,cAAc,GAAGA,CAACC,GAAG,EAAEC,MAAM,GAAG,GAAG,KAAK;EACnD,IAAI,CAACD,GAAG,EAAE,OAAO,EAAE;EACnB,IAAIA,GAAG,CAACC,MAAM,IAAIA,MAAM,EAAE,OAAOD,GAAG;EACpC,OAAOA,GAAG,CAACE,KAAK,CAAC,CAAC,EAAED,MAAM,CAAC,GAAG,KAAK;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,UAAU,GAAGA,CAACC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAChD,MAAMC,cAAc,GAAG;IACrBC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,MAAM;IACbC,GAAG,EAAE;EACP,CAAC;EAED,MAAMC,OAAO,GAAGN,IAAI,YAAYO,IAAI,GAAGP,IAAI,GAAG,IAAIO,IAAI,CAACP,IAAI,CAAC;EAE5D,OAAO,IAAIX,IAAI,CAACmB,cAAc,CAAC,OAAO,EAAE;IAAE,GAAGN,cAAc;IAAE,GAAGD;EAAQ,CAAC,CAAC,CAACP,MAAM,CAACY,OAAO,CAAC;AAC5F,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,UAAU,GAAGA,CAACZ,MAAM,GAAG,CAAC,KAAK;EACxC,OAAOa,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAGhB,MAAM,CAAC;AAC5D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMiB,KAAK,GAAIC,EAAE,IAAK,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,iBAAiB,GAAGA,CAACC,aAAa,EAAEC,eAAe,KAAK;EACnE,IAAID,aAAa,IAAI,CAAC,IAAIC,eAAe,IAAID,aAAa,EAAE,OAAO,CAAC;EACpE,OAAOV,IAAI,CAACY,KAAK,CAAE,CAACF,aAAa,GAAGC,eAAe,IAAID,aAAa,GAAI,GAAG,CAAC;AAC9E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,YAAY,GAAIC,KAAK,IAAK;EACrC,MAAMC,UAAU,GAAG,4BAA4B;EAC/C,OAAOA,UAAU,CAACC,IAAI,CAACF,KAAK,CAAC;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
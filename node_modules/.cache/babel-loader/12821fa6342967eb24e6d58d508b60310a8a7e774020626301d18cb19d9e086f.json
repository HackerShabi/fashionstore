{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shabi\\\\Desktop\\\\my-tailwind-app\\\\src\\\\admin\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // Check if user is already logged in (from localStorage)\n  useEffect(() => {\n    const user = localStorage.getItem('adminUser');\n    if (user) {\n      setCurrentUser(JSON.parse(user));\n    }\n    setLoading(false);\n  }, []);\n\n  // Login function\n  const login = (email, password) => {\n    // For now, we'll use a hardcoded admin user\n    // In a real app, this would validate against Firebase Auth\n    if (email === 'admin@example.com' && password === 'admin123') {\n      const user = {\n        email: email,\n        name: 'Admin User',\n        role: 'admin',\n        id: '1'\n      };\n      localStorage.setItem('adminUser', JSON.stringify(user));\n      setCurrentUser(user);\n      setError('');\n      return Promise.resolve(user);\n    } else {\n      setError('Invalid email or password');\n      return Promise.reject(new Error('Invalid email or password'));\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('adminUser');\n    setCurrentUser(null);\n  };\n  const value = {\n    currentUser,\n    login,\n    logout,\n    error,\n    setError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"vSB9Nc0q2BGZUhjg31O+gFt0Mxs=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","error","setError","user","localStorage","getItem","JSON","parse","login","email","password","name","role","id","setItem","stringify","Promise","resolve","reject","Error","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Shabi/Desktop/my-tailwind-app/src/admin/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// Create auth context\r\nconst AuthContext = createContext();\r\n\r\n// Custom hook to use auth context\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  // Check if user is already logged in (from localStorage)\r\n  useEffect(() => {\r\n    const user = localStorage.getItem('adminUser');\r\n    if (user) {\r\n      setCurrentUser(JSON.parse(user));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = (email, password) => {\r\n    // For now, we'll use a hardcoded admin user\r\n    // In a real app, this would validate against Firebase Auth\r\n    if (email === 'admin@example.com' && password === 'admin123') {\r\n      const user = { \r\n        email: email,\r\n        name: 'Admin User',\r\n        role: 'admin',\r\n        id: '1'\r\n      };\r\n      localStorage.setItem('adminUser', JSON.stringify(user));\r\n      setCurrentUser(user);\r\n      setError('');\r\n      return Promise.resolve(user);\r\n    } else {\r\n      setError('Invalid email or password');\r\n      return Promise.reject(new Error('Invalid email or password'));\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem('adminUser');\r\n    setCurrentUser(null);\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    logout,\r\n    error,\r\n    setError\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,OAAON,UAAU,CAACI,WAAW,CAAC;AAChC,CAAC;AAACE,EAAA,CAFWD,OAAO;AAIpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACAE,SAAS,CAAC,MAAM;IACd,MAAMe,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC9C,IAAIF,IAAI,EAAE;MACRL,cAAc,CAACQ,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,CAAC;IAClC;IACAH,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMQ,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACjC;IACA;IACA,IAAID,KAAK,KAAK,mBAAmB,IAAIC,QAAQ,KAAK,UAAU,EAAE;MAC5D,MAAMP,IAAI,GAAG;QACXM,KAAK,EAAEA,KAAK;QACZE,IAAI,EAAE,YAAY;QAClBC,IAAI,EAAE,OAAO;QACbC,EAAE,EAAE;MACN,CAAC;MACDT,YAAY,CAACU,OAAO,CAAC,WAAW,EAAER,IAAI,CAACS,SAAS,CAACZ,IAAI,CAAC,CAAC;MACvDL,cAAc,CAACK,IAAI,CAAC;MACpBD,QAAQ,CAAC,EAAE,CAAC;MACZ,OAAOc,OAAO,CAACC,OAAO,CAACd,IAAI,CAAC;IAC9B,CAAC,MAAM;MACLD,QAAQ,CAAC,2BAA2B,CAAC;MACrC,OAAOc,OAAO,CAACE,MAAM,CAAC,IAAIC,KAAK,CAAC,2BAA2B,CAAC,CAAC;IAC/D;EACF,CAAC;;EAED;EACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBhB,YAAY,CAACiB,UAAU,CAAC,WAAW,CAAC;IACpCvB,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMwB,KAAK,GAAG;IACZzB,WAAW;IACXW,KAAK;IACLY,MAAM;IACNnB,KAAK;IACLC;EACF,CAAC;EAED,oBACEZ,OAAA,CAACC,WAAW,CAACgC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA3B,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAAC/B,GAAA,CAtDWF,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AAwDzB,eAAeH,WAAW;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}